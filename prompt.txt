// lib/features/auth/data/model/login_request_model.dart

import 'dart:convert';

import 'package:gmedia_project/features/auth/domain/entities/login_request_entity.dart';

class LoginRequestModel {
  final String email;
  final String password;

  LoginRequestModel({required this.email, required this.password});

  Map<String, dynamic> toMap() {
    return {'email': email, 'password': password};
  }

  String toJson() => json.encode(toMap());

  LoginRequestEntity toEntity() {
    return LoginRequestEntity(email: email, password: password);
  }

  factory LoginRequestModel.fromMap(Map<String, dynamic> map) {
    return LoginRequestModel(
      email: map['email'] ?? '',
      password: map['password'] ?? '',
    );
  }

  factory LoginRequestModel.fromJson(String source) =>
      LoginRequestModel.fromMap(json.decode(source));
}

// lib/features/auth/data/repository_impl/auth_repository_impl.dart

import 'package:dartz/dartz.dart';
import 'package:gmedia_project/core/services/services_locator.dart';
import 'package:gmedia_project/features/auth/data/model/login_request_model.dart';
import 'package:gmedia_project/features/auth/data/source/auth_api_service.dart';
import 'package:gmedia_project/features/auth/data/source/auth_local_service.dart';
import 'package:gmedia_project/features/auth/domain/repository/auth_repository.dart';
import 'package:dio/dio.dart';
import 'package:shared_preferences/shared_preferences.dart';

class AuthRepositoryImpl extends AuthRepository {
  @override
  Future<bool> isLoggedIn() async {
    return await sl<AuthLocalService>().isLoggedIn();
  }

  @override
  Future<Either> signIn(LoginRequestModel loginRequestModel) async {
    Either result = await sl<AuthApiService>().login(loginRequestModel);
    return result.fold(
      (error) {
        return Left(error);
      },
      (data) async {
        Response response = data;
        SharedPreferences sharedPreferences =
            await SharedPreferences.getInstance();
        sharedPreferences.setString(
          "token",
          response.data['data']['token'],
        );
        return Right(response);
      },
    );
  }
}

// lib/features/auth/data/source/auth_api_service.dart

import 'package:dartz/dartz.dart';
import 'package:dio/dio.dart';
import 'package:gmedia_project/core/constant/api_urls.dart';
import 'package:gmedia_project/core/network/dio_client.dart';
import 'package:gmedia_project/core/services/services_locator.dart';
import 'package:gmedia_project/features/auth/data/model/login_request_model.dart';

abstract class AuthApiService {
  Future<Either> login(LoginRequestModel loginRequestModel);
}

class AuthApiServiceImpl implements AuthApiService {
  @override
  Future<Either> login(LoginRequestModel loginRequestModel) async {
    try {
      var response = await sl<DioClient>().post(
        ApiUrls.login,
        data: loginRequestModel.toMap(),
      );
      return Right(response.data);
    }on DioException catch (e) {
      return Left(e.response!.data['message'] ?? 'Login failed');
    }
  }
}


// lib/features/auth/data/source/auth_local_service.dart

import 'package:shared_preferences/shared_preferences.dart';

abstract class AuthLocalService {
  Future<void> saveToken(String token);
  Future<bool> isLoggedIn();
}


class AuthLocalServiceImpl implements AuthLocalService{
  final SharedPreferences sharedPreferences;
  AuthLocalServiceImpl(this.sharedPreferences);
  
  @override
  Future<bool> isLoggedIn() async {
    final String? token = sharedPreferences.getString('token');
    return token != null && token.isNotEmpty;
  }
  
  @override
  Future<void> saveToken(String token) async {
    await sharedPreferences.setString('token', token);
  }
}

// lib/features/auth/domain/entities/login_request_entity.dart

class LoginRequestEntity {
  final String email;
  final String password;

  LoginRequestEntity({required this.email, required this.password});
}

// lib/features/auth/domain/repository/auth_repository.dart

import 'package:dartz/dartz.dart';
import 'package:gmedia_project/features/auth/data/model/login_request_model.dart';

abstract class AuthRepository {
  Future<Either> signIn(LoginRequestModel loginRequestModel);
  Future<bool> isLoggedIn();
}


// lib/features/auth/domain/usecase/is_logged_in.dart

import 'package:gmedia_project/core/services/services_locator.dart';
import 'package:gmedia_project/core/usecase/usecase.dart';
import 'package:gmedia_project/features/auth/domain/repository/auth_repository.dart';

class IsLoggedInUseCase implements Usecase<bool, dynamic> {
  @override
  Future<bool> call({dynamic param}) async {
    return await sl<AuthRepository>().isLoggedIn();
  }
}


// lib/features/auth/domain/usecase/signin_usecases.dart

import 'package:dartz/dartz.dart';
import 'package:gmedia_project/core/services/services_locator.dart';
import 'package:gmedia_project/core/usecase/usecase.dart';
import 'package:gmedia_project/features/auth/data/model/login_request_model.dart';
import 'package:gmedia_project/features/auth/domain/repository/auth_repository.dart';

class SigninUsecases implements Usecase<Either, LoginRequestModel> {
  @override
  Future<Either> call({LoginRequestModel? param}) async {
    return sl<AuthRepository>().signIn(param!);
  }

}


// lib/features/auth/presentation/cubit/button/button_cubit.dart

// lib/features/auth/presentation/cubit/button/button_state.dart
// lib/features/auth/presentation/cubit/visible/visible_cubit.dart
// lib/features/auth/presentation/cubit/visible/visible_state.dart

// lib/features/auth/presentation/pages/login_page.dart

import 'package:flutter/material.dart';

class LoginPage extends StatelessWidget {
  const LoginPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const Text('Login Page');
  }
}

class ApiUrls {
  //user
  static const String baseUrl = "mas-pos.appmedia.id/api/v1";
  static const String login = "$baseUrl/login";
  static const String profile = "$baseUrl/profile";
  static const String category = "$baseUrl/category"; //get post put(id) delete(id)
  static const String product = "$baseUrl/product"; //get post delete(id)
  static const String updateProduct = "$baseUrl/product/update";  //(post but edit)

}